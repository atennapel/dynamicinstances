SYNTAX
E ::=     effects
  Exc, Flip, State,

t ::=     value types
  i,j,k     labels
  ()        unit type
  Inst i E  instance type
  t -> T    function type
  forall i.T   universally quantified type over a label

r ::=   instance variable set
  { i, j, k, ... }

T ::=   computation types
  t!r             annotated type

v ::=   values
  x,y,z,k     variables
  ()          unit value
  inst(n)     instances (for the semantics)
  \x.c        abstractions
  /\i.c       instance abstractions

h ::=   handlers
  { return x_r. c_r, v#op_1 x_1 k_1. c_1, ..., v#op_n x_n k_n. c_n }

c ::=   computations
  return v                return value
  v v                     application
  v [i]                   instance application
  x <- c; c               sequencing
  v#op(v)                 operation call
  new e                   new instance
  (i, x) <- unpack c; c   unpack existential
  handle(c) h             handle computation with handler
