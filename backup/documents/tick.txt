Local effects

Assume we are given some function f, that takes a numerical function and returns an integer:

  f : (Int -> Int) -> Int

If we call the function parameter g, then how can we count how many times g is called?
We would like to define the following function:

  count : ((Int -> Int) -> Int) -> (Int -> Int) -> Int

Where count takes such an f and g and returns the amount of times g was called.

Basic algebraic effects and handlers

-- define a tick effect to count
effect Tick {
  tick : () -> ()
}

-- a handler that evaluates Tick and returns the final tick count
tickHandler = handler {
  return x -> \s -> s
  tick () k -> \s -> k () (s + 1)
}

-- implementation of count
count f g =
  (with tickHandler handle
    f (\x -> tick (); g x)) 0

-- will evaluate to 3
count (\g -> g (g (g 10))) (\x -> x + 1)

This works for simple functions but will fail when either f or g uses the tick operations.
This is because the handler inside of count will handle all tick operations, irregardles of if the are called by count or by f or g:

-- will evaluate to 4 instead of 3
count (\g -> tick (); g (g (g 10))) (\x -> x + 1)

-- will evaluate to 6 instead of 3
count (\g -> g (g (g 10))) (\x -> tick (); x + 1)

To solve this we could define a seperate effect just for count:

effect CountTick {
  countTick : () -> ()
}

This would not solve the problem though since this effect has to be defined globally and so the tick operation can still be called by f or g.

To solve this we need to have a notion of local effects.
We want to define and handle an instance of the state effect locally such that the operations of this instance cannot be used anywhere else.
Dynamic instances allow us to do this.

Dynamic instances

-- define the tick effect
effect Tick {
  tick : () -> ()
}

-- a handler that, given an instance of Tick, evaluates and returns the final tick count
tickHandler r = handler {
  return x -> \s -> s
  r#tick () k -> \s -> k () (s + 1)
}

-- implementation of count
count f g =
  let inst = new Tick in
  (with tickHandler inst handle
    f (\x -> inst#tick (); g x)) 0

The tick handler used inside of count only handles tick operations on the locally generated Tick instance.
Nobody else has access to this tick instance and so this solves the problem we had.

Local exception

We can easily model exceptions with algebraic effects if we ignore the continuation in the handler.

effect Exception {
  throw : () -> Void
}

exc = new Exception

trycatch f g = with handler {
  exc#throw () k -> g ()
} handle f ()

div a b =
  if b == 0 then
    exc#throw ()
  else
    a / b

-- return 0 if b == 0
saveDiv a b =
  trycatch
    (\() -> div a b)
    (\() -> 0)

Where normally exception handlers can catch all exceptions, with dynamic instances we can have local exceptions that can only be caught when one has access to the instance.
The following function will always result in unhandled operations, since the fresh instance inside of notcatchable is not exposed:

notcatchable =
  let inst = new Exception in
  inst#throw ()

Using dynamic instances we can then have exceptions that can only be caught in a specific way.
Catchable returns both a function that might throw and a function that given a function f catches the exception and calls f.
Since the instance is not exposed in any way, one can only catch the exception with the function that is returned.

catchable =
  let inst = new Exception in
  (
    \x -> if x == 0 then inst#throw () else x,
    \f -> handler { inst#throw () _ -> f () }
  )

Generalizing this idea we can have libraries that require the user to call a certain function at some point or else their program won't typecheck.

effect Required {
  require : () -> ()
}

getLibraryFunction =
  let inst = new Required;
  (
    someLibraryFunction,
    onlyHandlerThatHandlesInst
  )

When the user calls someLibraryFunction it calls the operation require.
Using an effect system this results in an unhandled operation, where the only way to resolve this type error is by wrapping the call to someLibraryFunction with onlyHandlerThatHandlesInst at some point.
