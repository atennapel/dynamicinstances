effect State {
	get : () -> Int
	put : Int -> ()
}

effect h@Heap {
  ref : Int -> Inst h State
}

runState : forall l. Int -> Inst l State -> (() -> Int!{l}) -> Int
runState = /\l. \v ins action.
  f <- handle(action ()) {
    ins#return x -> \s -> x
    ins#get () k -> \s -> k s s
    ins#put s' k -> \s -> k () s'
  };
  f v

runHeap : (forall l. Inst l Heap -> Int!{l}) -> Int
runHeap = \c.
  fresh l;
  new l@Heap as h;
  handle(c [l] h) {
    ref v k ->
      new l@State as r;
      runState [l] r (\(). k r)
  }

program : forall l. Inst l Heap -> Int!{l}
program = /\l. \h.
  r <- h#ref 42;
  r#get ()

main : () -> Int
main = \().
  runHeap [Int] program
